<?xml version="1.0" encoding="UTF-8" ?>
<!-- 日志级别从低到高分别是TRACE < DEBUG < INFO < WARN < ERROR < FATAL,如果设置为WAR，则低于WARN的信息都不会输出 -->
<!-- scan: 当此书行设置为true时，配置文件如果发生了改变，将会被重新家在，默认值为true -->
<!-- scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此书行生效，默认时间间隔为1分钟-->
<!-- debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false -->
<configuration scan="true" scanPeriod="10 seconds">
    <!-- <include resource="org/springframework/boot/logging/logback/base.xml"/> -->
    <contextName>logback</contextName>
    <!-- name的值是变量的名称,value的值是变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可使用${}来使用变量 -->
    <property name="log.path" value="/tmp"/>

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 输出到控制台 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志appender是为了开发使用,只配置最低级别,控制台输出的日志级别是大于或等于此级别的日志信息 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!-- 输出到文件 -->
    <!-- 时间滚动输出 level为Debug日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/log_debug.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略,按日期,按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为WARN的日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/log_warn.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为error的日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${log.path}/log_error.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。 <logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性
        name:用来指定受此logger的约束的某一个包或者具体的某一个类。
        level：用来设定打印级别，大小写无关：TRACE,DEBUG,INFO,WARN,ERROR,ALL和OFF，还有一个特俗值INHERITED或者同义词NUL，
               代表强制执行上级的级别.
        addtivity:是否向上级logger传递打印信息.默认是true
    -->
    <!-- <logger name="org.springframework.web" level="info"/> -->
    <!-- <logger name="org.springframework.scheduling.annotation.ScheduleAnnotationBeanPostProcessor" level="info"/> -->
    <!--
        使用Mybatis的时候，SQL语句是debug下才会打印，而这里我们只配置了info，所以想要看到sql语句的话，有以下两种操作：
        第一种把<root level="info">改为<root level="debug">这样就会打印sql，不过这样日志会出现很多其他日志
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常的info级别。
    -->

    <!--
        root节点是必须节点,用来指定最基础的日志输出级别，只有一个level属性
        level：用来设置打印日志级别，大小写无关：trace，DEBUG,INFO,WARN,ERROR,ALL,OFF
        不能设置为INHERITED或者同义词null，默认是debug
        可以包含零个或多个元素，标识这个appender将会添加到logger
    -->

    <!-- 开发环境：打印控制台 -->
    <springProfile name="dev">
        <logger name="com.xwszt.backend" level="debug"/>
    </springProfile>

    <root level="debug">
        <appender-ref ref="CONSOLE"/>
        <!--<appender-ref ref="DEBUG_FILE"/>-->
        <!--<appender-ref ref="INFO_FILE"/>-->
        <!--<appender-ref ref="WARN_FILE"/>-->
        <!--<appender-ref ref="ERROR_FILE"/>-->
    </root>

    <!-- 生产环境：输出到文件-->
    <!--<springProfile name="pro">-->
        <!--<root level="info">-->
            <!--<appender-ref ref="CONSOLE"/>-->
            <!--<appender-ref ref="DEBUG_FILE"/>-->
            <!--<appender-ref ref="INFO_FILE"/>-->
            <!--<appender-ref ref="WARN_FILE"/>-->
            <!--<appender-ref ref="ERROR_FILE"/>-->
        <!--</root>-->
    <!--</springProfile>-->
</configuration>